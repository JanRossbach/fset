{:tag :machine, :name :scheduler, :clauses ({:tag :sets, :values ({:tag :enumerated-set, :id :PID, :elems (:PID1 :PID2 :PID3)})} {:tag :variables, :values (:activePID1 :activePID2 :activePID3 :readyPID1 :readyPID2 :readyPID3 :waitingPID1 :waitingPID2 :waitingPID3)} {:tag :invariants, :values ({:tag :and, :preds ({:tag :member, :elem :activePID1, :set :BOOL} {:tag :member, :elem :activePID2, :set :BOOL} {:tag :member, :elem :activePID3, :set :BOOL} {:tag :member, :elem :readyPID1, :set :BOOL} {:tag :member, :elem :readyPID2, :set :BOOL} {:tag :member, :elem :readyPID3, :set :BOOL} {:tag :member, :elem :waitingPID1, :set :BOOL} {:tag :member, :elem :waitingPID2, :set :BOOL} {:tag :member, :elem :waitingPID3, :set :BOOL})} {:tag :member, :elem {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :activePID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID3, :right :TRUE}, :then #{:PID3}, :else #{}})}, :set {:tag :power-set, :set :PID}} {:tag :member, :elem {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :readyPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID3, :right :TRUE}, :then #{:PID3}, :else #{}})}, :set {:tag :power-set, :set :PID}} {:tag :member, :elem {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :waitingPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID3, :right :TRUE}, :then #{:PID3}, :else #{}})}, :set {:tag :power-set, :set :PID}} {:tag :subset, :sets ({:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :activePID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID3, :right :TRUE}, :then #{:PID3}, :else #{}})} :PID)} {:tag :subset, :sets ({:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :readyPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID3, :right :TRUE}, :then #{:PID3}, :else #{}})} :PID)} {:tag :subset, :sets ({:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :waitingPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID3, :right :TRUE}, :then #{:PID3}, :else #{}})} :PID)} {:tag :equals, :left {:tag :intersection, :sets ({:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :readyPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID3, :right :TRUE}, :then #{:PID3}, :else #{}})} {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :waitingPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID3, :right :TRUE}, :then #{:PID3}, :else #{}})})}, :right #{}} {:tag :equals, :left {:tag :intersection, :sets ({:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :activePID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID3, :right :TRUE}, :then #{:PID3}, :else #{}})} {:tag :union, :sets ({:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :readyPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID3, :right :TRUE}, :then #{:PID3}, :else #{}})} {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :waitingPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID3, :right :TRUE}, :then #{:PID3}, :else #{}})})})}, :right #{}} {:tag :less-equals, :nums ({:tag :cardinality, :set {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :activePID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID3, :right :TRUE}, :then #{:PID3}, :else #{}})}} 1)} {:tag :implication, :preds ({:tag :equals, :left {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :activePID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID3, :right :TRUE}, :then #{:PID3}, :else #{}})}, :right #{}} {:tag :equals, :left {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :readyPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID3, :right :TRUE}, :then #{:PID3}, :else #{}})}, :right #{}})})} {:tag :init, :values ({:tag :parallel-sub, :subs ({:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:activePID1 :FALSE)} {:tag :assignment, :id-vals (:activePID2 :FALSE)} {:tag :assignment, :id-vals (:activePID3 :FALSE)})} {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:readyPID1 :FALSE)} {:tag :assignment, :id-vals (:readyPID2 :FALSE)} {:tag :assignment, :id-vals (:readyPID3 :FALSE)})} {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:waitingPID1 :FALSE)} {:tag :assignment, :id-vals (:waitingPID2 :FALSE)} {:tag :assignment, :id-vals (:waitingPID3 :FALSE)})})})} {:tag :operations, :values ({:tag :op, :returns [:rr], :name :nr_ready, :args [], :body {:tag :assignment, :id-vals (:rr {:tag :cardinality, :set {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :readyPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID3, :right :TRUE}, :then #{:PID3}, :else #{}})}})}} {:tag :op, :name :newPID1, :returns [], :args [], :body {:tag :select, :clauses ({:tag :and, :preds ({:tag :member, :elem :PID1, :set :PID} {:tag :not, :pred {:tag :member, :elem :PID1, :set {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :activePID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID3, :right :TRUE}, :then #{:PID3}, :else #{}})}}} {:tag :not, :pred {:tag :member, :elem :PID1, :set {:tag :union, :sets ({:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :readyPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID3, :right :TRUE}, :then #{:PID3}, :else #{}})} {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :waitingPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID3, :right :TRUE}, :then #{:PID3}, :else #{}})})}}})} {:tag :assignment, :id-vals (:waitingPID1 :TRUE)})}} {:tag :op, :name :newPID2, :returns [], :args [], :body {:tag :select, :clauses ({:tag :and, :preds ({:tag :member, :elem :PID2, :set :PID} {:tag :not, :pred {:tag :member, :elem :PID2, :set {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :activePID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID3, :right :TRUE}, :then #{:PID3}, :else #{}})}}} {:tag :not, :pred {:tag :member, :elem :PID2, :set {:tag :union, :sets ({:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :readyPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID3, :right :TRUE}, :then #{:PID3}, :else #{}})} {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :waitingPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID3, :right :TRUE}, :then #{:PID3}, :else #{}})})}}})} {:tag :assignment, :id-vals (:waitingPID2 :TRUE)})}} {:tag :op, :name :newPID3, :returns [], :args [], :body {:tag :select, :clauses ({:tag :and, :preds ({:tag :member, :elem :PID3, :set :PID} {:tag :not, :pred {:tag :member, :elem :PID3, :set {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :activePID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :activePID3, :right :TRUE}, :then #{:PID3}, :else #{}})}}} {:tag :not, :pred {:tag :member, :elem :PID3, :set {:tag :union, :sets ({:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :readyPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :readyPID3, :right :TRUE}, :then #{:PID3}, :else #{}})} {:tag :union, :sets ({:tag :if-expr, :cond {:tag :equals, :left :waitingPID1, :right :TRUE}, :then #{:PID1}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID2, :right :TRUE}, :then #{:PID2}, :else #{}} {:tag :if-expr, :cond {:tag :equals, :left :waitingPID3, :right :TRUE}, :then #{:PID3}, :else #{}})})}}})} {:tag :assignment, :id-vals (:waitingPID3 :TRUE)})}} {:tag :op, :name :delPID1, :returns [], :args [], :body {:tag :select, :clauses ({:tag :equals, :left :waitingPID1, :right :TRUE} {:tag :assignment, :id-vals (:waitingPID1 :FALSE)})}} {:tag :op, :name :delPID2, :returns [], :args [], :body {:tag :select, :clauses ({:tag :equals, :left :waitingPID2, :right :TRUE} {:tag :assignment, :id-vals (:waitingPID2 :FALSE)})}} {:tag :op, :name :delPID3, :returns [], :args [], :body {:tag :select, :clauses ({:tag :equals, :left :waitingPID3, :right :TRUE} {:tag :assignment, :id-vals (:waitingPID3 :FALSE)})}} {:tag :op, :name :readyPID1, :returns [], :args [], :body {:tag :select, :clauses ({:tag :equals, :left :waitingPID1, :right :TRUE} {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:waitingPID1 :FALSE)} {:tag :if-sub, :cond {:tag :and, :preds ({:tag :not, :pred {:tag :equals, :left :activePID1, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID2, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID3, :right :TRUE}})}, :then {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:activePID1 :TRUE)} {:tag :assignment, :id-vals (:activePID2 :FALSE)} {:tag :assignment, :id-vals (:activePID3 :FALSE)})}, :else {:tag :assignment, :id-vals (:readyPID1 :TRUE)}})})}} {:tag :op, :name :readyPID2, :returns [], :args [], :body {:tag :select, :clauses ({:tag :equals, :left :waitingPID2, :right :TRUE} {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:waitingPID2 :FALSE)} {:tag :if-sub, :cond {:tag :and, :preds ({:tag :not, :pred {:tag :equals, :left :activePID1, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID2, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID3, :right :TRUE}})}, :then {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:activePID1 :FALSE)} {:tag :assignment, :id-vals (:activePID2 :TRUE)} {:tag :assignment, :id-vals (:activePID3 :FALSE)})}, :else {:tag :assignment, :id-vals (:readyPID2 :TRUE)}})})}} {:tag :op, :name :readyPID3, :returns [], :args [], :body {:tag :select, :clauses ({:tag :equals, :left :waitingPID3, :right :TRUE} {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:waitingPID3 :FALSE)} {:tag :if-sub, :cond {:tag :and, :preds ({:tag :not, :pred {:tag :equals, :left :activePID1, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID2, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID3, :right :TRUE}})}, :then {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:activePID1 :FALSE)} {:tag :assignment, :id-vals (:activePID2 :FALSE)} {:tag :assignment, :id-vals (:activePID3 :TRUE)})}, :else {:tag :assignment, :id-vals (:readyPID3 :TRUE)}})})}} {:tag :op, :name :swapPID1, :returns [], :args [], :body {:tag :select, :clauses ({:tag :and, :preds ({:tag :equals, :left :readyPID1, :right :TRUE} {:tag :not, :pred {:tag :and, :preds ({:tag :not, :pred {:tag :equals, :left :activePID1, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID2, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID3, :right :TRUE}})}})} {:tag :parallel-sub, :subs ({:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:waitingPID1 {:tag :pred->bool, :pred {:tag :or, :preds ({:tag :equals, :left :waitingPID1, :right :TRUE} {:tag :equals, :left :activePID1, :right :TRUE})}})} {:tag :assignment, :id-vals (:waitingPID2 {:tag :pred->bool, :pred {:tag :or, :preds ({:tag :equals, :left :waitingPID2, :right :TRUE} {:tag :equals, :left :activePID2, :right :TRUE})}})} {:tag :assignment, :id-vals (:waitingPID3 {:tag :pred->bool, :pred {:tag :or, :preds ({:tag :equals, :left :waitingPID3, :right :TRUE} {:tag :equals, :left :activePID3, :right :TRUE})}})})} {:tag :if-sub, :cond {:tag :and, :preds ({:tag :not, :pred {:tag :equals, :left :readyPID1, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :readyPID2, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :readyPID3, :right :TRUE}})}, :then {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:activePID1 :FALSE)} {:tag :assignment, :id-vals (:activePID2 :FALSE)} {:tag :assignment, :id-vals (:activePID3 :FALSE)})}, :else {:tag :parallel-sub, :subs ({:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:activePID1 :TRUE)} {:tag :assignment, :id-vals (:activePID2 :FALSE)} {:tag :assignment, :id-vals (:activePID3 :FALSE)})} {:tag :assignment, :id-vals (:readyPID1 :FALSE)})}})})}} {:tag :op, :name :swapPID2, :returns [], :args [], :body {:tag :select, :clauses ({:tag :and, :preds ({:tag :equals, :left :readyPID2, :right :TRUE} {:tag :not, :pred {:tag :and, :preds ({:tag :not, :pred {:tag :equals, :left :activePID1, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID2, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID3, :right :TRUE}})}})} {:tag :parallel-sub, :subs ({:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:waitingPID1 {:tag :pred->bool, :pred {:tag :or, :preds ({:tag :equals, :left :waitingPID1, :right :TRUE} {:tag :equals, :left :activePID1, :right :TRUE})}})} {:tag :assignment, :id-vals (:waitingPID2 {:tag :pred->bool, :pred {:tag :or, :preds ({:tag :equals, :left :waitingPID2, :right :TRUE} {:tag :equals, :left :activePID2, :right :TRUE})}})} {:tag :assignment, :id-vals (:waitingPID3 {:tag :pred->bool, :pred {:tag :or, :preds ({:tag :equals, :left :waitingPID3, :right :TRUE} {:tag :equals, :left :activePID3, :right :TRUE})}})})} {:tag :if-sub, :cond {:tag :and, :preds ({:tag :not, :pred {:tag :equals, :left :readyPID1, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :readyPID2, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :readyPID3, :right :TRUE}})}, :then {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:activePID1 :FALSE)} {:tag :assignment, :id-vals (:activePID2 :FALSE)} {:tag :assignment, :id-vals (:activePID3 :FALSE)})}, :else {:tag :parallel-sub, :subs ({:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:activePID1 :FALSE)} {:tag :assignment, :id-vals (:activePID2 :TRUE)} {:tag :assignment, :id-vals (:activePID3 :FALSE)})} {:tag :assignment, :id-vals (:readyPID2 :FALSE)})}})})}} {:tag :op, :name :swapPID3, :returns [], :args [], :body {:tag :select, :clauses ({:tag :and, :preds ({:tag :equals, :left :readyPID3, :right :TRUE} {:tag :not, :pred {:tag :and, :preds ({:tag :not, :pred {:tag :equals, :left :activePID1, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID2, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :activePID3, :right :TRUE}})}})} {:tag :parallel-sub, :subs ({:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:waitingPID1 {:tag :pred->bool, :pred {:tag :or, :preds ({:tag :equals, :left :waitingPID1, :right :TRUE} {:tag :equals, :left :activePID1, :right :TRUE})}})} {:tag :assignment, :id-vals (:waitingPID2 {:tag :pred->bool, :pred {:tag :or, :preds ({:tag :equals, :left :waitingPID2, :right :TRUE} {:tag :equals, :left :activePID2, :right :TRUE})}})} {:tag :assignment, :id-vals (:waitingPID3 {:tag :pred->bool, :pred {:tag :or, :preds ({:tag :equals, :left :waitingPID3, :right :TRUE} {:tag :equals, :left :activePID3, :right :TRUE})}})})} {:tag :if-sub, :cond {:tag :and, :preds ({:tag :not, :pred {:tag :equals, :left :readyPID1, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :readyPID2, :right :TRUE}} {:tag :not, :pred {:tag :equals, :left :readyPID3, :right :TRUE}})}, :then {:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:activePID1 :FALSE)} {:tag :assignment, :id-vals (:activePID2 :FALSE)} {:tag :assignment, :id-vals (:activePID3 :FALSE)})}, :else {:tag :parallel-sub, :subs ({:tag :parallel-sub, :subs ({:tag :assignment, :id-vals (:activePID1 :FALSE)} {:tag :assignment, :id-vals (:activePID2 :FALSE)} {:tag :assignment, :id-vals (:activePID3 :TRUE)})} {:tag :assignment, :id-vals (:readyPID3 :FALSE)})}})})}})})}