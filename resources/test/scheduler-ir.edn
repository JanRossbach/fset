{:tag :machine, :name :scheduler, :clauses ({:tag :sets, :values ({:tag :enumerated-set, :identifier :PID, :elements (:PID1 :PID2 :PID3)})} {:tag :variables, :values (:activePID1 :activePID2 :activePID3 :readyPID1 :readyPID2 :readyPID3 :waitingPID1 :waitingPID2 :waitingPID3)} {:tag :invariants, :values ({:tag :and, :predicates ({:tag :member, :element :activePID1, :set :BOOL} {:tag :member, :element :activePID2, :set :BOOL} {:tag :member, :element :activePID3, :set :BOOL})} {:tag :and, :predicates ({:tag :member, :element :readyPID1, :set :BOOL} {:tag :member, :element :readyPID2, :set :BOOL} {:tag :member, :element :readyPID3, :set :BOOL})} {:tag :and, :predicates ({:tag :member, :element :waitingPID1, :set :BOOL} {:tag :member, :element :waitingPID2, :set :BOOL} {:tag :member, :element :waitingPID3, :set :BOOL})} {:tag :and, :predicates ({:tag :not, :predicate {:tag :and, :predicates ({:tag :equal, :left :readyPID1, :right :TRUE} {:tag :equal, :left :waitingPID1, :right :TRUE})}} {:tag :not, :predicate {:tag :and, :predicates ({:tag :equal, :left :readyPID2, :right :TRUE} {:tag :equal, :left :waitingPID2, :right :TRUE})}} {:tag :not, :predicate {:tag :and, :predicates ({:tag :equal, :left :readyPID3, :right :TRUE} {:tag :equal, :left :waitingPID3, :right :TRUE})}})} {:tag :and, :predicates ({:tag :not, :predicate {:tag :and, :predicates ({:tag :equal, :left :activePID1, :right :TRUE} {:tag :or, :predicates ({:tag :equal, :left :readyPID1, :right :TRUE} {:tag :equal, :left :waitingPID1, :right :TRUE})})}} {:tag :not, :predicate {:tag :and, :predicates ({:tag :equal, :left :activePID2, :right :TRUE} {:tag :or, :predicates ({:tag :equal, :left :readyPID2, :right :TRUE} {:tag :equal, :left :waitingPID2, :right :TRUE})})}} {:tag :not, :predicate {:tag :and, :predicates ({:tag :equal, :left :activePID3, :right :TRUE} {:tag :or, :predicates ({:tag :equal, :left :readyPID3, :right :TRUE} {:tag :equal, :left :waitingPID3, :right :TRUE})})}})} {:tag :less-eq, :numbers ({:tag :plus, :numbers ({:tag :if-expr, :condition {:tag :equal, :left :activePID1, :right :TRUE}, :then 1, :else 0} {:tag :if-expr, :condition {:tag :equal, :left :activePID2, :right :TRUE}, :then 1, :else 0} {:tag :if-expr, :condition {:tag :equal, :left :activePID3, :right :TRUE}, :then 1, :else 0})} 1)} {:tag :implication, :predicates ({:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :activePID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID3, :right :TRUE}})} {:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :readyPID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :readyPID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :readyPID3, :right :TRUE}})})})} {:tag :init, :values ({:tag :parallel-substitution, :substitutions ({:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:activePID1), :values (:FALSE)} {:tag :assign, :identifiers (:activePID2), :values (:FALSE)} {:tag :assign, :identifiers (:activePID3), :values (:FALSE)})} {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:readyPID1), :values (:FALSE)} {:tag :assign, :identifiers (:readyPID2), :values (:FALSE)} {:tag :assign, :identifiers (:readyPID3), :values (:FALSE)})} {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:waitingPID1), :values (:FALSE)} {:tag :assign, :identifiers (:waitingPID2), :values (:FALSE)} {:tag :assign, :identifiers (:waitingPID3), :values (:FALSE)})})})} {:tag :operations, :values ({:tag :operation, :return [:rr], :name :nr_ready, :parameters [], :body {:tag :assign, :identifiers (:rr), :values ({:tag :plus, :numbers ({:tag :if-expr, :condition {:tag :equal, :left :readyPID1, :right :TRUE}, :then 1, :else 0} {:tag :if-expr, :condition {:tag :equal, :left :readyPID2, :right :TRUE}, :then 1, :else 0} {:tag :if-expr, :condition {:tag :equal, :left :readyPID3, :right :TRUE}, :then 1, :else 0})})}} {:tag :operation, :name :newPID1, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :activePID1, :right :TRUE}} {:tag :not, :predicate {:tag :or, :predicates ({:tag :equal, :left :readyPID1, :right :TRUE} {:tag :equal, :left :waitingPID1, :right :TRUE})}})} {:tag :assign, :identifiers (:waitingPID1), :values (:TRUE)})}} {:tag :operation, :name :newPID2, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :activePID2, :right :TRUE}} {:tag :not, :predicate {:tag :or, :predicates ({:tag :equal, :left :readyPID2, :right :TRUE} {:tag :equal, :left :waitingPID2, :right :TRUE})}})} {:tag :assign, :identifiers (:waitingPID2), :values (:TRUE)})}} {:tag :operation, :name :newPID3, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :activePID3, :right :TRUE}} {:tag :not, :predicate {:tag :or, :predicates ({:tag :equal, :left :readyPID3, :right :TRUE} {:tag :equal, :left :waitingPID3, :right :TRUE})}})} {:tag :assign, :identifiers (:waitingPID3), :values (:TRUE)})}} {:tag :operation, :name :delPID1, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :equal, :left :waitingPID1, :right :TRUE} {:tag :assign, :identifiers (:waitingPID1), :values (:FALSE)})}} {:tag :operation, :name :delPID2, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :equal, :left :waitingPID2, :right :TRUE} {:tag :assign, :identifiers (:waitingPID2), :values (:FALSE)})}} {:tag :operation, :name :delPID3, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :equal, :left :waitingPID3, :right :TRUE} {:tag :assign, :identifiers (:waitingPID3), :values (:FALSE)})}} {:tag :operation, :name :readyPID1, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :equal, :left :waitingPID1, :right :TRUE} {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:waitingPID1), :values (:FALSE)} {:tag :if-sub, :condition {:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :activePID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID3, :right :TRUE}})}, :then {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:activePID1), :values (:TRUE)} {:tag :assign, :identifiers (:activePID2), :values (:FALSE)} {:tag :assign, :identifiers (:activePID3), :values (:FALSE)})}, :else {:tag :assign, :identifiers (:readyPID1), :values (:TRUE)}})})}} {:tag :operation, :name :readyPID2, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :equal, :left :waitingPID2, :right :TRUE} {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:waitingPID2), :values (:FALSE)} {:tag :if-sub, :condition {:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :activePID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID3, :right :TRUE}})}, :then {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:activePID1), :values (:FALSE)} {:tag :assign, :identifiers (:activePID2), :values (:TRUE)} {:tag :assign, :identifiers (:activePID3), :values (:FALSE)})}, :else {:tag :assign, :identifiers (:readyPID2), :values (:TRUE)}})})}} {:tag :operation, :name :readyPID3, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :equal, :left :waitingPID3, :right :TRUE} {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:waitingPID3), :values (:FALSE)} {:tag :if-sub, :condition {:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :activePID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID3, :right :TRUE}})}, :then {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:activePID1), :values (:FALSE)} {:tag :assign, :identifiers (:activePID2), :values (:FALSE)} {:tag :assign, :identifiers (:activePID3), :values (:TRUE)})}, :else {:tag :assign, :identifiers (:readyPID3), :values (:TRUE)}})})}} {:tag :operation, :name :swapPID1, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :and, :predicates ({:tag :equal, :left :readyPID1, :right :TRUE} {:tag :not, :predicate {:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :activePID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID3, :right :TRUE}})}})} {:tag :parallel-substitution, :substitutions ({:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:waitingPID1), :values ({:tag :pred->bool, :predicate {:tag :or, :predicates ({:tag :equal, :left :waitingPID1, :right :TRUE} {:tag :equal, :left :activePID1, :right :TRUE})}})} {:tag :assign, :identifiers (:waitingPID2), :values ({:tag :pred->bool, :predicate {:tag :or, :predicates ({:tag :equal, :left :waitingPID2, :right :TRUE} {:tag :equal, :left :activePID2, :right :TRUE})}})} {:tag :assign, :identifiers (:waitingPID3), :values ({:tag :pred->bool, :predicate {:tag :or, :predicates ({:tag :equal, :left :waitingPID3, :right :TRUE} {:tag :equal, :left :activePID3, :right :TRUE})}})})} {:tag :if-sub, :condition {:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :readyPID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :readyPID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :readyPID3, :right :TRUE}})}, :then {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:activePID1), :values (:FALSE)} {:tag :assign, :identifiers (:activePID2), :values (:FALSE)} {:tag :assign, :identifiers (:activePID3), :values (:FALSE)})}, :else {:tag :parallel-substitution, :substitutions ({:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:activePID1), :values (:TRUE)} {:tag :assign, :identifiers (:activePID2), :values (:FALSE)} {:tag :assign, :identifiers (:activePID3), :values (:FALSE)})} {:tag :assign, :identifiers (:readyPID1), :values (:FALSE)})}})})}} {:tag :operation, :name :swapPID2, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :and, :predicates ({:tag :equal, :left :readyPID2, :right :TRUE} {:tag :not, :predicate {:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :activePID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID3, :right :TRUE}})}})} {:tag :parallel-substitution, :substitutions ({:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:waitingPID1), :values ({:tag :pred->bool, :predicate {:tag :or, :predicates ({:tag :equal, :left :waitingPID1, :right :TRUE} {:tag :equal, :left :activePID1, :right :TRUE})}})} {:tag :assign, :identifiers (:waitingPID2), :values ({:tag :pred->bool, :predicate {:tag :or, :predicates ({:tag :equal, :left :waitingPID2, :right :TRUE} {:tag :equal, :left :activePID2, :right :TRUE})}})} {:tag :assign, :identifiers (:waitingPID3), :values ({:tag :pred->bool, :predicate {:tag :or, :predicates ({:tag :equal, :left :waitingPID3, :right :TRUE} {:tag :equal, :left :activePID3, :right :TRUE})}})})} {:tag :if-sub, :condition {:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :readyPID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :readyPID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :readyPID3, :right :TRUE}})}, :then {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:activePID1), :values (:FALSE)} {:tag :assign, :identifiers (:activePID2), :values (:FALSE)} {:tag :assign, :identifiers (:activePID3), :values (:FALSE)})}, :else {:tag :parallel-substitution, :substitutions ({:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:activePID1), :values (:FALSE)} {:tag :assign, :identifiers (:activePID2), :values (:TRUE)} {:tag :assign, :identifiers (:activePID3), :values (:FALSE)})} {:tag :assign, :identifiers (:readyPID2), :values (:FALSE)})}})})}} {:tag :operation, :name :swapPID3, :return [], :parameters [], :body {:tag :select, :clauses ({:tag :and, :predicates ({:tag :equal, :left :readyPID3, :right :TRUE} {:tag :not, :predicate {:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :activePID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :activePID3, :right :TRUE}})}})} {:tag :parallel-substitution, :substitutions ({:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:waitingPID1), :values ({:tag :pred->bool, :predicate {:tag :or, :predicates ({:tag :equal, :left :waitingPID1, :right :TRUE} {:tag :equal, :left :activePID1, :right :TRUE})}})} {:tag :assign, :identifiers (:waitingPID2), :values ({:tag :pred->bool, :predicate {:tag :or, :predicates ({:tag :equal, :left :waitingPID2, :right :TRUE} {:tag :equal, :left :activePID2, :right :TRUE})}})} {:tag :assign, :identifiers (:waitingPID3), :values ({:tag :pred->bool, :predicate {:tag :or, :predicates ({:tag :equal, :left :waitingPID3, :right :TRUE} {:tag :equal, :left :activePID3, :right :TRUE})}})})} {:tag :if-sub, :condition {:tag :and, :predicates ({:tag :not, :predicate {:tag :equal, :left :readyPID1, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :readyPID2, :right :TRUE}} {:tag :not, :predicate {:tag :equal, :left :readyPID3, :right :TRUE}})}, :then {:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:activePID1), :values (:FALSE)} {:tag :assign, :identifiers (:activePID2), :values (:FALSE)} {:tag :assign, :identifiers (:activePID3), :values (:FALSE)})}, :else {:tag :parallel-substitution, :substitutions ({:tag :parallel-substitution, :substitutions ({:tag :assign, :identifiers (:activePID1), :values (:FALSE)} {:tag :assign, :identifiers (:activePID2), :values (:FALSE)} {:tag :assign, :identifiers (:activePID3), :values (:TRUE)})} {:tag :assign, :identifiers (:readyPID3), :values (:FALSE)})}})})}})})}
